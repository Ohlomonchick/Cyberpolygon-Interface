
#user  nobody;
worker_processes  1;

#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # Можно так удобнее
    upstream pnetlab {
        server 192.168.1.8;
    }

    upstream django {
        server 127.0.0.1:8000;
    }

    # Для WebSocket (консоли/терминал)
    map $http_upgrade $connection_upgrade {
        default upgrade;
        ''      close;
    }

    map $http_referer $api_backend {
        # по-умолчанию — Django
        default           django;

        # если пришёл запрос со страниц PNETLab —
        # проксируем на pnetlab
        "~^https?://[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/legacy/topology"  pnetlab;
        "~^https?://[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/images/"          pnetlab;
        "~^https?://[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/html5/"           pnetlab;
        "~^https?://[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/store/"           pnetlab;
        # можно добавить другие паттерны...
    }

    server {
        listen       80;
        server_name  localhost;

        #charset koi8-r;

        #access_log  logs/host.access.log  main;

        location ^~ /api/ {
            proxy_pass         http://$api_backend;       # <- переменная из map
            proxy_set_header   Host              $host;
            proxy_set_header   X-Real-IP         $remote_addr;
            proxy_set_header   X-Forwarded-For   $proxy_add_x_forwarded_for;
            proxy_set_header   X-Forwarded-Proto $scheme;
            # другие proxy_* директивы, что у вас уже есть...
        }

        location /pnetlab/ {
            # ВАЖНО: слеш на конце сохраняет относительные пути
            proxy_pass http://pnetlab/;

            proxy_http_version 1.1;
            proxy_set_header Host              $host;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;

            # Куки: всегда под текущий хост и видимы на всём сайте
            proxy_cookie_domain ~.* $host;
            proxy_cookie_path   /    /;

            # Редиректы с апстрима на наш префикс
            proxy_redirect http://192.168.1.8/  /pnetlab/;
            proxy_redirect https://192.168.1.8/ /pnetlab/;

            # sub_filter будет работать только при незжатом ответе
            proxy_set_header Accept-Encoding "";

            sub_filter_once off;
            sub_filter_types text/html text/css application/javascript application/json;

            # Сносим абсолюты на IP -> делаем относительными
            sub_filter 'http://192.168.1.8/'  '/';
            sub_filter 'https://192.168.1.8/' '/';
            sub_filter 'src="//192.168.1.8/'  'src="/';
            sub_filter 'href="//192.168.1.8/' 'href="/';

            # Не добавляй сюда CORS — он не нужен при same-origin
        }

        # Всё, что PNETLab реально вызывает с корня: /store, /api и т.д.
        location ~ ^/(store|themes|extensions|auth|ajax|public|react|pages|icons|fonts|captcha|legacy|images|html5)(/|$) {
            proxy_pass http://pnetlab;

            proxy_http_version 1.1;
            proxy_set_header Host              $host;
            proxy_set_header X-Forwarded-Host  $host;
            proxy_set_header X-Real-IP         $remote_addr;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Upgrade           $http_upgrade;
            proxy_set_header Connection        $connection_upgrade;

            proxy_cookie_domain ~.* $host;
            proxy_cookie_path   /    /;

            # Здесь редиректы можно оставлять в корень
            proxy_redirect http://192.168.1.8/  /;
            proxy_redirect https://192.168.1.8/ /;

            proxy_set_header Accept-Encoding "";

            sub_filter_once off;
            sub_filter_types text/html text/css application/javascript application/json;
            sub_filter 'http://192.168.1.8/'  '/';
            sub_filter 'https://192.168.1.8/' '/';
        }

        # Статические файлы Django
        location /static/ {
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location /media/ {
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        location / {
            proxy_pass http://127.0.0.1:8000;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }

        #error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   html;
        }
    }

    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
